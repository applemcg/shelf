# [[file:~/Dropbox/commonplace/software/shreadme.org::*reportlib,%20working][reportlib\,\ working:1]]
function report_emptyfile
{ 
    [[ -s $1 ]] && return 1;
    report_usage File: is empty
}
function report_isfile
{ 
    [[ -f $1 ]] || return 1;
    report_usage $1 IS a file and should not be
}
function report_needcount
{ 
    [[ $2 -ge $1 ]] && return 1;
    usage need at least $1 arg/s $(shift 2; echo $*)
}
function report_notbase
{ 
    [[ $(basename $PWD) == "$1" ]] && return 1;
    comment change to "$1" directory
}
function report_notblockspecial
{ 
    [[ -b $1 ]] && return 1;
    report_usage $1 is NOT a blockspecial file
}
function report_notcalledby
{ 
    set ${1:-/dev/null} $(myname 3) non-Existant-function;
    [[ $2 == $1 ]] && return 1;
    report_usage was NOT called by $1.
}
function report_notcharacterspecial
{ 
    [[ -c $1 ]] && return 1;
    report_usage $1 is NOT a characterspecial file
}
function report_notdirectory
{ 
    [[ -d $1 ]] && return 1;
    report_usage $1 is NOT a Directory
}
function report_notexecutable
{ 
    [[ -x $1 ]] && return 1;
    report_usage $1 is NOT an executable file
}
function report_notexisting
{ 
    [[ -e $1 ]] && return 1;
    report_usage $1 is NOT an existing file
}
function report_notfunction
{ 
    set ${1:-/dev/null};
    isfunction $1 && return 1;
    report_usage $1 is NOT a Function
}
function report_notgroupiseuid
{ 
    [[ -G $1 ]] && return 1;
    report_usage $1 is NOT a file with groupiseuid
}
function report_notlargeenough
{ 
    [[ $2 -ge $1 ]] && return 1;
    report_usage $1 $(echo 1 $1, 2 $2 $(shift 2; echo $*))
}
function report_notnonzerostring
{ 
    [[ -n $1 ]] && return 1;
    report_usage $1 is NOT a nonzerolengthstring
}
function report_notowneriseuid
{ 
    [[ -O $1 ]] && return 1;
    report_usage $1 is NOT a file with owneriseuid
}
function report_notpipe
{ 
    [[ -p /dev/stdin ]] && return 1;
    report_usage is NOT reading a pipe
}
function report_notreadable
{ 
    [[ -r $1 ]] && return 1;
    report_usage $1 is NOT a readable file
}
function report_notsetgroupid
{ 
    [[ -g $1 ]] && return 1;
    report_usage $1 is NOT a file with setgroupid
}
function report_notsetuserid
{ 
    [[ -u $1 ]] && return 1;
    report_usage $1 is NOT a file with setuserid
}
function report_notsocket
{ 
    [[ -S $1 ]] && return 1;
    report_usage $1 is NOT a socket
}
function report_notstickybitset
{ 
    [[ -k $1 ]] && return 1;
    report_usage $1 is NOT a file with its stickybitset
}
function report_notsymboliclink
{ 
    [[ -L $1 ]] && return 1;
    report_usage $1 is NOT a symboliclink
}
function report_notwritable
{ 
    [[ -w $1 ]] && return 1;
    report_usage $1 is NOT a writable file
}
function report_notzerolengthstring
{ 
    [[ -z $1 ]] && return 1;
    report_usage $1 is NOT a zerolengthstring
}
function report_usage
{ 
    comment USAGE $(myname 3): $*
}
report_functions () 
{ 
    set | awk '$2 ~ /\(\)/ { print $1 }' | grep '^report_'
}
report_nofilefrom () 
{ 
    set $(eval $*) /dev/null $*;
    [[ -f $1 ]] && return 1;
    shift;
    report_usage \'$*\' did not return a file name.
}
report_notargcount () 
{ 
    [[ $2 -ge $1 ]] && return 1;
    report_usage need at least $1 arg/s: $(shift 2; echo $*)
}
report_notcommand () 
{ 
    ignore type -a $1 && return 1;
    report_usage $1 is NOT a command
}
report_notfile () 
{ 
    [[ -f $1 ]] && return 1;
    report_usage $1 is NOT a file
}
report_notfilegreaterthanzero () 
{ 
    [[ -s $1 ]] && return 1;
    report_usage $1 is NOT a filegreaterthanzero
}
report_nottrue () 
{ 
    eval "$@" && return 1;
    report_usage $@ FAILED
}
# reportlib\,\ working:1 ends here
