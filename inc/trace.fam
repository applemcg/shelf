trace_call () 
{ 
    trace_stderr "$@"
}
trace_copyright () 
{ 
    comment "Copyright (C) 2015,2016 JYATL - Just Yet Another Testing Lab";
    comment "mailto: mcgowan (at) alum DOT mit DOT edu"
}
trace_debug () 
{ 
    comment $PWD $(myname 2) $*;
    trap read debug
}
trace_init () 
{ 
    declare -f fam_iam > /dev/null || { 
        comment $(myname) FAM_IAM is NOT a function;
        return 1
    };
    fam_iam;
    smart_list trace_passed  trace_{call,copyright,debug,init,missing,old,simple,stderr}
}
trace_missing () 
{
    : create a replacement function to show the callstack.
    : date: 2017-06-04;
    : date: 2017-07-18;
    report_notargcount 1 $# "function name to trace where called" && return 1;
    eval "$1 () { callStack \$(myname); }"
}
trace_old () 
{ 
    : date: 2017-08-19;
    ${@:-echo} trace_{set,show,off,on,isOFF,isOKto,base,basic,easy,replace,fbdy,level,toggle,summary,state}
}
trace_simple () 
{ 
    : ~ arg ...;
    : prints Calling Function and passed arguments to STDERR;
    pa=${FUNCNAME[1]:-COMMANDLINE};
    printf "TRACE %s\t%s\n" "$pa" "$*" 1>&2
}
trace_stderr () 
{ 
    pa=${FUNCNAME[2]:-COMMANDLINE};
    gr=${FUNCNAME[3]:-COMMANDLINE};
    printf "TRACE %s\t@ %s\t%d  ( %s )\n" "$gr" "$pa" $# "$*" 1>&2
}
trace_help () 
{ 
    echo trace functions:;
    sfg trace_ | sed 's/^/  /'
}
