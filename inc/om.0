# om_generic
# This function offers it's users three standard features:
# 1. any function in such a family may be invoked:
#    : family subfun arg ...     # rather than
#    : family_subfun arg ...     
#    the simple reason being for command line use; the apace bar is much
#    more convenient than the underscore.  having supplied this gloss,
#    it's necessary to point out to use the underscore name when using
#    such a function in other functions, simply for name-discovery.
# 1. the default behavior for the head of the /family/, the family-name
#    itself, is identical to the the use:
#    : family help
# 1. invokes the function:
#    : family firsttime
#    only the first time the /family/ or one of it's members is called 
#    thru the family name.  This is a way to display a copyright 
#    notice only once, the default behavior.  In this sence, the first
#    time means "in the process of the current shell".
# [[file:~/Dropbox/commonplace/software/shreadme.org::*om_generic][om_generic:1]]
copyright_om () 
{ 
    comment "Copyright (C) 2014-2016, JYATL - Just Yet Another Testing Lab";
    comment "mailto: mcgowan (at) alum DOT mit DOT edu";
}
om_tally () 
{ 
    trace_call $*;
    om_list | sort | uniq -c
}
om_help () { echo to see OM functions, om_list; }
om_list () 
{ 
    sfg _ | awk -F_ '{ printf "object\t%s\nmethod\t%s\n", $1, $2 }'
}
om_init () 
{ 
    declare -f om_iam >/dev/null || { comment $(myname) OM_IAM is NOT a function; return 1; }
    om_iam
}
om_iam () 
{ 
    : user identifies themself as an OM object;
    set $(myname 2);
    set ${1%_init};
    report_notcalledby ${1}_init && return 1;

    : create the OM function
    eval "$1 () { om_generic $1 \$*; }"

    : every family has a list of members
    local l=${1}_list;
    declare -f $l > /dev/null 2>&1 || {
         eval "$l () { (sfg ^${1}_; sfg _${1}$) 2>/dev/null; }";
    }
    : every family may have shell varialbles
    local v=${1}_vars;
    local V=$(UC $1)
    declare -f $v > /dev/null 2>&1 || {
         eval "$v () { set | grep ^${V}_ 2>/dev/null; }";
    }
    : and a default help function when one doesnt exist
    local h=${1}_help;
    declare -f $h > /dev/null 2>&1 || {
         eval "$h () { echo $1 functions, variables:; ($v; $l) | sed 's/^/  /'; }";
    }
    : shows Copyright when library is sourced.
    local f=${1}_firsttime;
    eval "$f () { copyright_${1}; unset $f; }";

    : and displays the help
    ${1}_help 
}
om_generic () 
{ 
    : ~ fun { sub arg ... };
    : prefereably executes FUN_SUB arg ...;
    : or FUN_HELP;
    : ====================================;
    local fun=$1;
    shift;
    : only when a function is first use thru the model;
    declare -f ${fun}_firsttime > /dev/null && ${fun}_firsttime;
    [[ $# -lt 1 ]] && { 
        ${fun}_help 2> /dev/null;
        return
    };
    local f=${fun}_$1;
    shift;
    declare -f $f >/dev/null 2>&1 || { 
        ${fun}_help 2> /dev/null;
        return
    };
    $f $*
}
# om_generic:1 ends here
