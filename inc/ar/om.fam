copyright_om () 
{ 
    comment "Copyright (C) 2014-2016, JYATL - Just Yet Another Testing Lab";
    comment "mailto: mcgowan (at) alum DOT mit DOT edu"
}
fam_tally () 
{ 
    trace_call $*;
    fam_list | sort | uniq -c
}
fam_help () 
{ 
    echo to see FAM functions, fam_list
}
fam_list () 
{
    : first underscore delimits family,
    : subfunction may have _s in the name
    sfg _ | sed 's/_/ /' | awk '{ printf "family\t%s\nsubfun\t%s\n", $1, $2 }'
}
fam_init () 
{ 
    fam_iam
}
fam_sub () 
{
    report_notcalledby fam_iam && return 1;
    local f=${1}_$2;
    declare -f $f > /dev/null || { 
        shift 2;
        eval "$f () { $@ ; }"
    }
    declare -f $f
}
fam_iam () 
{ 
    : user identifies themself as a FAMily;

    set $(myname 2);
    set ${1%_init};
    report_notcalledby ${1}_init && return 1;

    : create the FAM function;
    eval "$1 () { fam_generic $1 \$*; }";

    : every family has a list of members or subfunctions;

    fam_sub $1 list "(sfg ^${1}_; sfg _${1}$)" "2>/dev/null"

    : every family may have shell variables;
    local UC=$(UC $1)

    fam_sub $1 vars "set | grep ^${UC}_ 2>/dev/null"

    : and a default help function when one doesnt exist;

    fam_sub $1 help "echo $1 functions,variables:; (${1}_vars; ${1}_list) | sed 's/^/  /'"

    : shows Copyright when library is sourced.;

    fam_sub $1 firsttime "copyright_${1}; unset ${1}_firsttime"

    : and displays the help
    ${1}_help
}
fam_generic () 
{ 
    : ~ fun { sub arg ... };
    : prefereably executes FUN_SUB arg ...;
    : or FUN_HELP;
    : ====================================;
    local fun=$1;
    shift;
    : only when a function is first use thru the model;
    declare -f ${fun}_firsttime > /dev/null && ${fun}_firsttime;
    [[ $# -lt 1 ]] && { 
        ${fun}_help 2> /dev/null;
        return
    };
    local f=${fun}_$1;
    shift;
    declare -f $f > /dev/null 2>&1 || { 
        ${fun}_help 2> /dev/null;
        return
    };
    $f $*
}
