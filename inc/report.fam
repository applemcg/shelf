# report family
report_copyright () 
{ 
    comment "Copyright (C) 2015-2016, JYATL - Just Yet Another Testing Lab";
    comment "mailto: mcgowan (at) alum DOT mit DOT edu"
}
report_init ()
{
    fam_iam
    assert_init
}
report_emptyfile ()
{ 
    [[ -s $1 ]] && return 1;
    report_usage File: is empty
}
report_isfile ()
{ 
    [[ -f $1 ]] || return 1;
    report_usage $1 IS a file and should not be
}
report_notblockspecial ()
{ 
    [[ -b $1 ]] && return 1;
    report_usage $1 is NOT a blockspecial file
}
report_notcalledby ()
{ 
    set ${1:-/dev/null} $(myname 3) non-Existant-function;
    [[ $2 == $1 ]] && return 1;
    report_usage was NOT called by $1.
}
report_notcharacterspecial ()
{ 
    [[ -c $1 ]] && return 1;
    report_usage $1 is NOT a characterspecial file
}
report_notdirectory ()
{ 
    [[ -d $1 ]] && return 1;
    report_usage $1 is NOT a Directory
}
report_notexecutable ()
{ 
    [[ -x $1 ]] && return 1;
    report_usage $1 is NOT an executable file
}
report_notexisting ()
{ 
    [[ -e $1 ]] && return 1;
    report_usage $1 is NOT an existing file
}
report_notfunction ()
{ 
    set ${1:-/dev/null};
    isfunction $1 && return 1;
    report_usage $1 is NOT a Function
}
report_notgroup ()
{ 
    [[ -G $1 ]] && return 1;
    report_usage $1 is NOT a file with group or egid
}
report_notnonzerostring ()
{ 
    [[ -n $1 ]] && return 1;
    report_usage $1 is NOT a nonzerolengthstring
}
report_notowner ()
{ 
    [[ -O $1 ]] && return 1;
    report_usage $1 is NOT a file with owner or euid
}
report_notpipe ()
{ 
    [[ -p /dev/stdin ]] && return 1;
    report_usage is NOT reading a pipe
}
report_notreadable ()
{ 
    [[ -r $1 ]] && return 1;
    report_usage $1 is NOT a readable file
}
report_notsetgroupid ()
{ 
    [[ -g $1 ]] && return 1;
    report_usage $1 is NOT a file with setgroupid
}
report_notsetuserid ()
{ 
    [[ -u $1 ]] && return 1;
    report_usage $1 is NOT a file with setuserid
}
report_notsocket ()
{ 
    [[ -S $1 ]] && return 1;
    report_usage $1 is NOT a socket
}
report_notstickybitset ()
{ 
    [[ -k $1 ]] && return 1;
    report_usage $1 is NOT a file with its stickybitset
}
report_notsymboliclink ()
{ 
    [[ -L $1 ]] && return 1;
    report_usage $1 is NOT a symboliclink
}
report_notwritable ()
{ 
    [[ -w $1 ]] && return 1;
    report_usage $1 is NOT a writable file
}
report_notzerolengthstring ()
{ 
    [[ -z "$1" ]] && return 1;
    report_usage $1 is NOT a zerolengthstring
}
report_usage ()
{ 
    comment USAGE $(myname 3): $*
}
report_notargcount () 
{ 
    [[ $2 -ge $1 ]] && return 1;
    report_usage need at least $1 arg/s: $(shift 2; echo $*)
}
report_notcommand () 
{ 
    quietly ignore type -a $1 && return 1;
    report_usage $1 is NOT a command
}
report_notmodifiedsinceread ()
{
    [[ -N $1 ]] && return 1;
    report_usage $1 is NOT modified since last READ
}
report_notterminal ()
{
    case $1 in
    [0-9] ) 
        [[ -t $1 ]] && return 1;
        report_usage $1 is NOT a TERMINAL
	;;
     * )
        report_usage $1 is not in range 0 - 9
	;;
    esac
}
report_notfile () 
{ 
    [[ -f $1 ]] && return 1;
    report_usage $1 is NOT a file
}
report_notfile_gt_zero () 
{ 
    [[ -s $1 ]] && return 1;
    report_usage $1 is NOT a filegreaterthanzero
}
report_notfunction () 
{ 
    declare -f $1 >/dev/null  && return 1;
    report_usage $1 is NOT a function
}
assert_template ()
{
    printf "is_%s  ()\n{\n"         $1
    printf "    %s\n}\n"           "$2"
    printf "assert_%s ()\n{\n"      $1
    printf "    %s && return 0;\n" "$2"
    printf "    report_usage \$1 is NOT a %s;\n"
    printf "    return 1\n}\n" "${3:-$1}"
}
assert_generate ()
{
    local fws="file with set"
    assert_template function   'declare -f $1 >/dev/null'

    assert_template file                '[[ -f $1 ]]'
    assert_template directory           '[[ -d $1 ]]'

    assert_template emptyfile           '[[ -s $1 ]]'
    assert_template executable          '[[ -x $1 ]]'
    assert_template existing            '[[ -e $1 ]]'
    assert_template readable            '[[ -r $1 ]]'
    assert_template writable            '[[ -w $1 ]]'
    assert_template modifiedsinceread   '[[ -N $1 ]]'
    
    assert_template blockspecial        '[[ -b $1 ]]'
    assert_template characterspecial    '[[ -c $1 ]]'
    assert_template groupiseuid         '[[ -G $1 ]]' 'whose groupiseuid'
    assert_template owneriseuid         '[[ -O $1 ]]' "whose owneriseuid"
    assert_template setgroupid          '[[ -g $1 ]]' "$fws groupid"
    assert_template setuserid           '[[ -u $1 ]]' "$fws userid"
    assert_template socket              '[[ -S $1 ]]'
    assert_template symboliclink        '[[ -L $1 ]]'

    assert_template nonzerolengthstring '[[ -n $1 ]]'    
    assert_template zerolengthstring    '[[ -z $1 ]]'

}
assert_help ()
{
    comment source ${BASH_SOURCE[$*]}
}
assert_init ()
{
    assert_make;
    sfg assert_
    sfg     is_ 
    functions ${BASH_SOURCE[$*]}
    assert_help
    fam_iam
}
assert_construction () { echo assert_{make,generate,functions,template}; }
assert_make ()
{
    eval "$(assert_generate|tee .generate.out)";
    unset $(assert_construction)
}
set -x
[[ $(basename ${BASH_SOURCE[0]}) == report.fam ]] && {

     report_init 1>&2
     assert_init 1>&2

}
set +x

report_notexactcount () 
{ 
    [[ $2 -eq $1 ]] && return 1;
    report_usage need exactly $1 arg/s: ${*:3}
}
