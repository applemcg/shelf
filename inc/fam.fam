copyright_fam () 
{ 
    comment "Copyright (C) 2014-2016, JYATL - Just Yet Another Testing Lab";
    comment "mailto: mcgowan (at) alum DOT mit DOT edu"
}
fam_tally () 
{ 
    trace_call $*;
    fam_list | sort | uniq -c
}
fam_help () 
{ 
    echo to see FAM functions, fam_list
}
fam_list () 
{
    : first underscore delimits family,
    : subfunction may have _s in the name
    sfg _ | sed 's/_/ /' | awk '{ printf "family\t%s\nsubfun\t%s\n", $1, $2 }'
}
fam_init () 
{ 
    fam_iam
}
fam_iam () 
{ 
    fam_sub () 
    {
        local f=${1}_$2;
        ignore isfunction $f || {
            shift 2;
            eval "$f () { $@ ; }"
        }
        declare -f $f
    }
    : user identifies themself as a FAMily;

    : set ${1:-$(myname 2)};  : TESTING only
    
    set $(myname 2)
    set ${1%_init};

    report_notcalledby ${1}_init && return 1;
    
    : create the FAM function;
    isfunction $1 || { eval "$1 () { fam_generic $1 \$*; }"; }

    : supply a missing copyright
    fam_sub $1 copyright "$(fam_copybody)"
    : and shows Copyright when library is first sourced.;
    fam_sub $1 firsttime "${1}_copyright; unset ${1}_firsttime"

    : every family has a list of members or subfunctions;
    fam_sub $1 list "(sfg ^${1}_; sfg _${1}$)" "2>/dev/null"

    : every family may have shell variables;
    local UC=$(UC $1)
    fam_sub $1 variable "eval ${UC}_\$1=\$2"
    fam_sub $1 vars "set | grep ^${UC}_ 2>/dev/null"

    : and a default help function when one doesnt exist;
    fam_sub $1 help "echo $1 functions,variables:; (${1}_vars; ${1}_list) | sed 's/^/  /'"
    : display the help
    ${1}_help
    unset fam_sub
}
fam_owner ()
{
    echo JYATL - Just Yet Another Testing Lab
}
fam_email ()
{
    echo mcgowan@alum.mit.edu
}
fam_copybody  ()
{
    local fmt="    %s \"%s\";\n";
    printf "$fmt" comment "Copyright (C) $(date +%Y), $(fam_owner)";
    printf "$fmt" comment "mailto: $(fam_email) ";
    printf "$fmt" ":" "mfgd:$(uname -n)/${PWD} $(ymd_hms)";
}
fam_newcopyright () 
{ 
    report_notargcount 1 $# libraryname && return 1;
    set ${1%lib};
 
    printf "$1_copyright ()\n{\n";
    fam_copybody
    printf "}\n"
}
fam_generic () 
{ 
    : ~ fun { sub arg ... };
    : prefereably executes FUN_SUB arg ...;
    : or FUN_HELP;
    : ====================================;
    local fun=$1;
    shift;
    : only when a function is first use thru the model;
    declare -f ${fun}_firsttime > /dev/null && ${fun}_firsttime;
    [[ $# -lt 1 ]] && { 
        ${fun}_help 2> /dev/null;
        return
    };
    local f=${fun}_$1;
    shift;
    declare -f $f > /dev/null 2>&1 || { 
        ${fun}_help 2> /dev/null;
        return
    };
    $f $*
}
