#+INCLUDE: universalOrgPreface.txt

#+TITLE: Shdoc User Guide

* COMMENT TODO
** TODO develop a documentation display standard.
* Scope

This is the  SHDOC /function family/ User Guide.  It  supports the [[./shelf.org][SHELF
Standard]].  See that standard for the role of a function family.

The shdoc  family supplies  features to  extract and  display comments
from functions which define the  interface to the function.  The function
writer can supply information to describe the functions arguments, any
files  that are  read, any  return  values, and  side-effects such  as
changing the process state. or writing on files.

At this time  (September 2016), there  is work in progress  to build a
meta-language of nouns  to collect useful data from  the shdoc format.
A sneak peek at those words:

#+BEGIN_EXAMPLE
    arguments  decision  effect   example  file       
    function   ref       returns  reads    writes
#+END_EXAMPLE

This work  builds an information  structure for functions  suitable to
convert into a browser interface, capable of user/developer navigation
similar to the established scripting languages.

* History, Precendent

The functions  here collect function descriptions.   Precedent for the
practice was first established by [[https://en.wikipedia.org/wiki/Javadoc][Javadoc]] and more recently in [[https://en.wikipedia.org/wiki/Plain_Old_Documentation][Perldoc]]
and [[https://en.wikipedia.org/wiki/Pydoc][Pydoc]].

The shd /function family/ is one member of the [[./shreadme.org][shelflib]] library.

At the  moment, the online references  to shdoc are few  and disjoint.
The  newest reference  to  a  [[http://mirror.unl.edu/ctan/macros/latex/contrib/shdoc/shdoc.pdf][shdoc package]]  is  targeted  at the  TeX
community.

*** shdoc, shd_with

These functions operate on shell functions, and operate similar to the
three mentioned  above: Java, Perl,  and Python.  The two  most useful
functions,  *shdoc*  and *shd_with*  return  a  function body  as  the
collected  comments in  what  I'm calling  *shdoc*,  or /shell  doclib
comment/ format:

* User Guide

There  are two  users of  the  *shdoc* function  format, the  function
writer  or  developer  and  the  user, or  ultimate  customer  of  the
high-level, or user interface to the package supplied by the devloper.

** Developer
The developer needs to know how to create function comments capable of
final use by other developers  and end-users.  The developer's concern
is therefore about the syntax and production tools.

The top-level developer funcitions shown here 

#+BEGIN_SRC sh :tangle ./inc/shdoc.0 :commentps both :padline no
shdoc () 
{ 
    : this is a shell doclib "shdoc" comment;
    : an shdoc comment is the first ":"-origin lines;
    : in the shell function, the rest being the executable.;
    for f in ${*:-$(myname)};
    do
        shd_each $f;
    done
}
shd_with () 
{ 
    : removes shd_less functions from shdoc results;
    : creating function {name}_doc for function "name";
    shdoc $* | awk '
   #                  { print "DEBUG: ", fcount, last > "/dev/stderr"; }
   $1 ~ /function/   { fcount++; last = $0; next;  }
   $1 ~ /}/ && last  { next }
   last              { print last; last = ""; fcount = 0;  }
   fcount == 0       { print }
		   '
}
shdoc_doc ()
{
    : this is a shell doclib "shdoc" comment;
    : an shddoc comment is the first ":"-origin lines;
    : in the shell function, the rest being the executable.;
}
#+END_SRC

Note the result. The *shdoc_doc* function is the first colon-delimited
lines of the *shdoc* function.

*shd_with* is the most useful of the bunch, as it says by
removing /shd_less/ functions from shdoc results.

*** shd_each

To complete the picture, here is *shd_each*.  It's notable in that it
insists on being called by *shdoc*.

#+BEGIN_SRC sh :tangle ./inc/shdoc.1 :comments both :padline no
shd_each () 
{ 
    report_notfunction $1 && return 1;
    report_notcalledby shdoc && return 2;
    trace_call $*;
    echo "function ${1}_doc {";
    declare -f $1 | awk '
       NR > 2 {
                if ( $1 !~ /^:/ ) exit
                else              print
	      }
	';
    echo "}"
}
#+END_SRC 

Note *shd_each* produces the result for only one function, if only to print
a single function body; it insists on being called by *shdoc*.

Here's a question:  /why doesn't shd_each have any shdoc comments?/

*** other useful functions

Note the shell idiom in the *shd_top* function.   It's a convenient 
shorthand to list a collection of similar names.  In this case, this
/shdlib/ conventionally defines functions whose name begins with /shd_/.

#+BEGIN_SRC sh :tangle ./inc/shdoc.2 :comments both :padline no
shd_top () 
{ 
    echo shdoc shd_{oc,each,with,test,top}
}
shd_test () 
{ 
    : 1. test default, NO arguments, then;
    : 2. stub out test all functions in the library;
    : 3. demonstrate ignore subsequent comments;
    : 4. test shd_with;
    : 5. test shd_each defends against non-shdoc call;
    shdoc;
    :;
    set $(functions shdlib);
    : doit shdoc $*;
    shd_with $*;
    shd_each $*;
    declare -f shd_test | grep -v '^ *:' 1>&2
}
shd_init () 
{ 
    fam_iam
}
shd_init 1>&2
#+END_SRC 

The standard  practice for such a  library has a single  executable as
the last line, as above.

The standard practice for a library family is now to call *fam_iam* from 
an /_init/ function for the family, in this case, *shd_init*

1. it defines a help function, if not already defined, {arg}_help,
   which lists the functions in the family
1. it's first argument defines a function when called with an argument
   which is a member of the family, calls that function with the
   following arguments, otherwise, it calls the help function.

For example:

: $ shd top       # calls shd_top, returning

** Collect
Consider using the report_ ... functions to collect the user guide
1. arguments
    + number, report_not ..
    + files,
    + names,
1. files,  report_notfile ...
    + read
    + written
1. functions
** presentation


** shdoc family
*** shdoc, shd_with

The functions here operate on  shell functions, and operate similar to
the  three mentioned  above: Java,  Perl,  and Python.   The two  most
useful functions, *shdoc* and *shd_with* produce a function whose body
is  the collected  comments in  what  I'm calling  *shdoc*, or  /shell
doclib comment/ format:

#+BEGIN_SRC sh :tangle ./inc/shdoc.0 :comments both :padline no
@include shdoc.1
@include shdoc.2
@include shdoc.3
shdoc_init ()
{
   fam_iam
}
#+END_SRC

#+BEGIN_SRC sh :tangle ./inc/shdoc.1 :comments both :padline no
shdoc () 
{ 
    : this is a shell doclib "shdoc" comment;
    : an shdoc comment is the first ":"-origin lines;
    : in the shell function, the rest being the executable.;
    for f in ${*:-$(myname)};
    do
        shd_each $f;
    done
}
shd_with () 
{ 
    : removes shd_less functions from shdoc results;
    : creating function {name}_doc for function "name";
    shdoc $* | awk '
   #                  { print "DEBUG: ", fcount, last > "/dev/stderr"; }
   $1 ~ /function/   { fcount++; last = $0; next;  }
   $1 ~ /}/ && last  { next }
   last              { print last; last = ""; fcount = 0;  }
   fcount == 0       { print }
		   '
}
function shdoc_doc {
    : this is a shell doclib "shdoc" comment;
    : an shddoc comment is the first ":"-origin lines;
    : in the shell function, the rest being the executable.;
}
#+END_SRC

Note the result. The *shdoc_doc* function is the first colon-delimited
lines of the *shdoc* function.

*shd_with* is the most useful of the bunch, as it says by
removing /shd_less/ functions from shdoc results.

*** shd_each

To complete the picture, here is *shd_each*.  It's notable in that it
insists on being called by *shdoc*.

#+BEGIN_SRC sh :tangle ./inc/shdoc.2 :comments both :padline no
shd_each () 
{ 
    report_notfunction $1 && return 1;
    report_notcalledby shdoc && return 2;
    trace_call $*;
    echo "function ${1}_doc {";
    declare -f $1 | awk '
       NR > 2 {
                if ( $1 !~ /^:/ ) exit
                else              print
	      }
	';
    echo "}"
}
shd_trim () 
{ 
    report_notfunction $1 && return 1;
    trace_call $*;
    declare -f $1 | awk ' $1 !~ /^:$/'
}

#+END_SRC 

Note *shd_each* produces the result for only one function, if only to print
a single function body; it insists on being called by *shdoc*.

Here's a question:  /why doesn't shd_each have any shdoc comments?/

* References

If reading on paper, this document is found on-line at
[[http://mcgowans.org/marty3/commonplace/software/shdoc.html]] 

+ my [[http://mcgowans.org/marty3/commonplace/][Commonplace Book]]
+ the [[./combine.org][Combine facility]]
+ the [[./shelf.org][SHELF Standard]]
+ the [[./README.org][Rationale and Practice]]
+ the [[./famguide.org][fam function family]]
+ the [[./shdoc.org][shdoc function family]]
+ the [[./trace.org][trace function family]]
+ the [[./utilguide.org][utility function group]]


#+INCLUDE: ./author.org
