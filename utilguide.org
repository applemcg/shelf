#+INCLUDE: ./universalOrgPreface.txt

#+TITLE: Utility Function User Guide

* COMMENT TODO

** TODO add OrgMode output format from shdoc for HTML function ref!
   for which i thank the shdoc work: ~/src/shdoc from '09
   this implies a LITTLE language to control side-effects

* Scope

This is User Guide for the Utility functions supporting the [[./shelf.org][SHELF Standard]].  

The UTIL Group has functions of a general nature for shell programming.

The SHELF Standard, in setting the practice for initializing libraries
relies on each family's initialization function, e.g. ~family_init~.

* Utility Functions

** comment
The comment function is a semantic means to keep comments in a function
given the canonical means of displaying a function body in the *bash* shell:
#+BEGIN_SRC 
$ declare -f comment
comment () 
{ 
    echo $* 1>&2
}
$
#+END_SRC
Functions using the syntactic sharp
: ls *.txt   # list text files
lose the comment, functions using the [[./shdoc.org][colon comment]] in [[./shdoc.org]]

** functions
The ~functions~ function reads either named files or *stdin*, presumably
containing bash shell functions, and extracts their unique names in the order
of occurrence.  (The reasons for the order-extraction are historical)

#+BEGIN_SRC 
functions () 
{ 
    trace_call $*;
    fun_from $* | printfirst
}
fun_from () 
{ 
    trace_call $*;
    : reconcile patterns to fuse;
    cat ${*:--} | awk ' 
        $2 ~ /^\(\)$/     { print $1 } 
             /^function / { print $2 }
    '
}
printfirst () 
{ 
    trace_call $*;
    awk '!printed [$1]++' $*
}
#+END_SRC
Notice the use of function tracing.
** fun_from
Does the heavy lifting for ~functions~.  It identifies both function definition formats:
: function functions { fun_from $* | printfirst ; }
or the canonical format seen above
** isfunction
This function returns the truth of whether its argument is a function or not:

#+BEGIN_SRC 
isfunction () 
{ 
    trace_call $*;
    declare -f $1 > /dev/null
}

$ isfunction isfunction && echo isfunction is a function
  isfunction is a function

$ isfunction noSuchFunction || echo noSuchFunction is NOT a function
  noSuchFunction is NOT a function
#+END_SRC
Notice the shell test for true: *&&* or false: *||* executes the echo
which reports the state of the test.
** myname

** printfirst
** setenv
** sfg

* Function lists

To control function naming, you may want to collect function names
explicitly, rather than rely on a default list, such as generated by
*fam_iam*.  Here's an example of a simple hierarchy of function
name-gathering:

: someFam_lista () { echo someFam_{this,that,theOther}; }
: someFam_listb () { echo someFam_{some,more,stuff}; }
: someFam_list ()  { for f in someFam_list{a,b}; do echo $f; $f; done; }

with a *foreach* function, the latter becomes:

: name_valule  () { echo $1; $1; }
: someFam_list () { foreach name_value someFam_list{a,b}; } 

Both approaches take advantage of the *bash* shell's [[https://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion][brace expansion]]
feature.

* References

If reading on paper, this document is found on-line at

http://github.com/applemcg/shelf/blob/master/famguide.org

+ [[https://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion][Bash Shell brace expansion]]
+ the [[./shdoc.org][shdoc function family]]
+ the [[./shelf.org][SHELF Standard]]
+ my [[../book.org][Commonplace Book]]


