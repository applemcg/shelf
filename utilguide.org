+INCLUDE: ./universalOrgPreface.org

#+TITLE: Utility Function User Guide

* COMMENT TODO

* Scope

This is User Guide for the Utility functions supporting the [[./shelf.org][SHELF Standard]].  

The UTIL Group has functions of a general nature for shell programming.

The SHELF Standard, in setting the practice for initializing libraries
relies on each family's initialization function, e.g. ~family_init~.

* Utility Functions

** comment
The comment function is a semantic means to keep comments in a function
given the canonical means of displaying a function body in the *bash* shell:
#+BEGIN_SRC 
$ declare -f comment
comment () 
{ 
    echo $* 1>&2
}
$
#+END_SRC
Functions using the syntactic sharp
: ls *.txt   # list text files
lose the comment, functions using the [[./shdoc.org][colon comment]] in [[./shdoc.org]], preserve
that comment format when using the [[http://wiki.bash-hackers.org/commands/builtin/declare][declare builtin]].  A word of caution in using
the colon comment.  It is evaluated by the shell, so avoid non-alpha-numeric
shell syntax.   e.g. this sets a shell variable:
: : ${NEW_HOME:=$HOME}
with the advantage that it retains an existing value of  NEW_HOME, or sets it to
the existing value of HOME.
** foreach
This function is so useful, even though I've coded around it, I'm including
it for its pedagogy.   I originally wrote this back in '08-'09 when teaching
Tcl.   It doesn't have the same syntax as the Tcl version, but fits the shell 
practice nicely:  *foreach* /function argument .../, the /function/ is applied
to each /argument/.
#+NAME: functions
** functions
The ~functions~ function reads either named files or *stdin*, presumably
containing bash shell functions, and extracts their unique names in the order
of occurrence.  (The reasons for the order-extraction are historical)

#+BEGIN_SRC 
functions () 
{ 
    trace_call $*;
    : reconcile patterns to fuse;
    cat ${*:--} | awk ' 
        $2 ~ /^\(\)$/     { print $1 } 
             /^function / { print $2 }
    '| printfirst
}
printfirst () 
{ 
    trace_call $*;
    awk '!printed [$1]++' $*
}
#+END_SRC
Notice the use of function tracing.
** isfunction
This function returns the truth of whether its argument is a function or not:

#+BEGIN_SRC 
isfunction () 
{ 
    trace_call $*;
    declare -f $1 > /dev/null
}

$ isfunction isfunction && echo isfunction is a function
  isfunction is a function

$ isfunction noSuchFunction || echo noSuchFunction is NOT a function
  noSuchFunction is NOT a function
#+END_SRC
Notice the shell test for true: *&&* or false: *||* executes the echo
which reports the state of the test.
** myname
The default behavior (with no arguments) returns the name of the
function itself.  It is most useful in [[./trace.org][tracing functions]], but may be
generally used.  The default argument of "1" refers to the calling
function, "2" is the caller's caller and so on, up the call stack.
#+BEGIN_SRC 
myname () 
{
    : ~ [n]
    : returns name of caller OR callers caller ...
    echo ${FUNCNAME[${1:-1}]}
}
#+END_SRC
** printfirst
See it's usage in [[functions]], where reading either the *stdin* or named
files, reports the first full line, whose first field is unique.
Consider this usage:  when a function is updated on the command-line,
you can append it's latest version to a file thusly:
: declare -f editedFunction | tee -a $(which functionLib)
Then source ing the function library retains the latest version, i.e.
the one you just applied, and listing the [[functions]] in the library with
that function, returns the functions in the order they were inserted.
: source functionLib
: declare -f $(functions $(which functionLib))
preserves the original insertion order, so that
: declare -f ... | tee newFunctionLib
produces an updated version of the library, with but one instance of
the functions in their original insertion order.
** setenv
A bit of useful theft from the [[https://en.wikipedia.org/wiki/C_shell][C shell -- csh]].  Rather than the bash:
: export VARIABLE=value 
I've grown to prefer the syntax-free expression:
: setenv VARIABLE value
** sfg
This one is most useful on the command line, e.g. ~sfg trace~
lists all functions in the current environment with /trace/ anywhere in 
the name.  The name /s/ /f/ /g/ is an acronym for Set Functions Grep:
: sfg () { set | functions | grep -i ${*:-.}; }
Which reminds me of an other rule: 

/Always plant a convenient default/, in this case for shell arguments.

In this case, *grep* with no pattern arguments will wait for user inputs, 
which in this case could be indefinite.   So, a convenient default for
grep is "."  which says "at least one character", or any non-blank line.
Therefore, *sfg*, all by itself produces the list of all functions in the
current environment.


* References

If reading on paper, this document is found on-line at

http://github.com/applemcg/shelf/blob/master/utilguide.org

** external 
+ [[https://en.wikipedia.org/wiki/C_shell][C shell -- csh]].
+ my [[http://mcgowans.org/marty3/commonplace/][Commonplace Book]]
+ the [[./combine.org][Combine facility]]
+ [[http://wiki.bash-hackers.org/commands/builtin/declare][declare builtin]] syntax, Bash Hacker's Wiki

** SHELF local
+ the [[./shelf.org][SHELF Standard]]
+ the [[./README.org][Shelflib -- User Guide]]
+ the [[./famguide.org][fam function family]]
+ the [[./shdoc.org][shdoc function family]]
+ the [[./trace.org][trace function family]]
+ the [[./utilguide.org][utility function group]]

#+INCLUDE: ./author.org
