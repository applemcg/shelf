#+INCLUDE: ./universalOrgPreface.org

#+TITLE: Family User Guide

* COMMENT TODO

** TODO add OrgMode output format from shdoc for HTML function ref!
   for which i thank the shdoc work: ~/src/shdoc from '09
   this implies a LITTLE language to control side-effects

* Scope

This is User Guide for the FAM Family, supporting the [[./shelf.org][SHELF Standard]].  

The FAM family supplies the organizing practice for the function family.

A library may contain one or more families.  It needn't contain any.
Not every function in a library built on families need belong to a 
family.   

The SHELF Standard, in setting the practice for initializing libraries
relies on each family's initialization function, e.g. ~family_init~.

* Main Family Functions

The user-functions in the FAM family:


** fam_iam

The *fam_iam* function is the main user function.  It must be called
by the family's /_init/ function; "someFam" is the name of our example
family:

: someFam_init () {  fam_iam; }

When called, it creates these following functions, where sub-functions
are appended to the family name. e.g. /family_list/:
1. /someFam/ -- uses *fam_generic* to supply help and firsttime
   functionality
1. /_firsttime/ -- executed the first time the family is loaded,
   whose default action is to supply the copyright notice for 
   the family.  The user is responsible to define a copyright
   function.   To see a sample:
   : declare -f copyright_fam
1. /_list/ -- if not already defined, produces a list
   of family member functions, and any other functions matching
   the family name, either /someFam_*/ or /*_someFam/.   See the
   discussion on [[Function lists]]
1. /_vars/ -- if not already defined, produces the names of
   family member shell variables
1. /_help/ -- if not already defined, produces a help message,
   defaulting to the family list and family variables

** fam_generic

This function has three standard features:

1. any function in such a family may be invoked:
   : someFam subfun arg ...     # rather than
   : someFam_subfun arg ...     
   the simple reason being for command line use; the apace bar is much
   more convenient than the underscore.  With this feature, a user
   should avoid the temptation to use it (omitting the underscore)
   when using such a function in other functions, if to guarantee proper
   name-discovery.
1. the default behavior for the head of the /family/, the family-name
   itself, is identical to the the use:
   : someFam help
1. invokes the function:
   : someFam firsttime
   only the first time ~someFam~ or one of it's members is called 
   thru the family name.  This is a way to display a copyright 
   notice only once, the default behavior.  In this sense, the first
   time means "in the process of the current shell". 
   
* Other Family functions
These are called, either ~fam help~ or ~fam_help~ for example
** help
An announcement to see the *fam_list*
** list
This function *fam_list*, different from a default ~someFam_list~
displays a two-column list of all family functions.
It examines the current function environment, for each function, it
lists the family name on one line and the subfunction on another,
suitable for use by *fam_tally*

** sub

The ~fam_sub~ function creates a family subfunction. The first
argument is the family name, the second the subfunction, and the
remaining arguments are the function body.

At this time, it is not intended as a general user function, and
defends itself against other uses.

** tally

Using the *fam_list* function, *fam_tally* tallies function names with
at least a single underscore in their counts the instances of
~someFam~ names (the portion before the underscore), and the /sub/
names, (the portion after the first underscore).  It produces a count
of each family name, and of each sub-function name, independent of 
it's family.  Expect a clustering of the count for the /_init/, /_help/,
/_list/, ... functions

Not every function with an underscore in its name necessarily belongs
to a family, and some functions which appear to belong in a family may
not have been defined as such.

** variable
This function sets a shell family variable name to a value:
:  someFam_variable THIS that;
such that the value of *SOMEFAM_THIS* is /that/
** vars
The default ~someFam_vars~ returns the names of the family variables,
which match the uppercase preface: /SOMEFAM_*/

* Function lists

To control function naming, you may want to collect function names
explicitly, rather than rely on a default list, such as generated by
*fam_iam*.  Here's an example of a simple hierarchy of function
name-gathering:

: someFam_lista () { echo someFam_{this,that,theOther}; }
: someFam_listb () { echo someFam_{some,more,stuff}; }
: someFam_list ()  { for f in someFam_list{a,b}; do echo $f; $f; done; }

with a *foreach* function, the latter becomes:

: name_valule  () { echo $1; $1; }
: someFam_list () { foreach name_value someFam_list{a,b}; } 

Both approaches take advantage of the *bash* shell's [[https://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion][brace expansion]]
feature.

* References

If reading on paper, this document is found on-line at

http://github.com/applemcg/shelf/blob/master/famguide.org
** external
+ [[https://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion][Bash Shell brace expansion]]
+ my [[http://mcgowans.org/marty3/commonplace/][Commonplace Book]]
+ the [[./combine.org][Combine facility]]

** SHELF local
+ the [[./shelf.org][SHELF Standard]]
+ the [[./README.org][Shelflib -- User Guide]]
+ the [[./famguide.org][fam function family]]
+ the [[./report.org][report function family]]
+ the [[./shdoc.org][shdoc function family]]
+ the [[./trace.org][trace function family]]
+ the [[./utilguide.org][utility function group]]

#+INCLUDE: ./author.org

** 
